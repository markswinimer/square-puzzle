{"ast":null,"code":"import _slicedToArray from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/markswinimer/react-jumpstart/square-puzzle/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n\n * State:\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateRow = _this.generateRow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateColumn = _this.generateColumn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      while (this.props.nRows > board.length) {\n        var i = 0;\n        var row = [];\n\n        for (i = 0; i < this.props.nCols; i++) {\n          row.push(Math.floor(Math.random() * 100) >= this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    } // TODO: create array-of-arrays of true/false values\n\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"generateRow\",\n    value: function generateRow(row) {\n      console.log(row);\n      return row.map(function (cell) {\n        return React.createElement(Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"generateColumn\",\n    value: function generateColumn(col) {\n      var _this2 = this;\n\n      console.log(col);\n      return col.forEach(function (row) {\n        _this2.generateRow(row);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(React.createElement(Cell, {\n            islit: this.state.board[y][x],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }));\n        }\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n\n\n      var ravi = this.generateColumn(this.state.board);\n      console.log(ravi);\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, board)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 50\n};\nexport default Board;","map":{"version":3,"sources":["/Users/markswinimer/react-jumpstart/square-puzzle/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","generateRow","generateColumn","nRows","length","i","row","nCols","push","Math","floor","random","chanceLightStartsOn","coord","ncols","nrows","split","map","Number","y","x","flipCell","console","log","cell","col","forEach","ravi","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n\n * State:\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 50\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this)\n    this.generateRow = this.generateRow.bind(this)\n    this.generateColumn = this.generateColumn.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    while(this.props.nRows > board.length) {\n      let i = 0;\n      let row = [];\n      for(i = 0; i < this.props.nCols; i++) {\n        row.push((Math.floor(Math.random() * 100)) >= this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n    // TODO: create array-of-arrays of true/false values\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\ngenerateRow(row) {\n  console.log(row)\n  return row.map(cell => (\n      <Cell />\n    ))\n}\n\ngenerateColumn(col) {\n  console.log(col)\n  return col.forEach((row) => {\n    this.generateRow(row)\n  })\n}\n\n  render() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++) {\n        row.push(<Cell islit={this.state.board[y][x]} />)\n      }\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    let ravi = this.generateColumn(this.state.board)\n    console.log(ravi)\n    return(\n      <table className=\"Board\">\n        <tbody>\n          <tr>\n            {board}\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}