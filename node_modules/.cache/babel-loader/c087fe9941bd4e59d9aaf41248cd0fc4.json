{"ast":null,"code":"import _slicedToArray from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/markswinimer/react-jumpstart/square-puzzle/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/markswinimer/react-jumpstart/square-puzzle/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n\n * State:\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      while (this.props.nRows > board.length) {\n        var i = 0;\n        var row = [];\n\n        for (i = 0; i < this.props.nCols; i++) {\n          row.push(Math.floor(Math.random() * 100) >= this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    } // TODO: create array-of-arrays of true/false values\n\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\" ------- \");\n      var _this$props = this.props,\n          nCols = _this$props.nCols,\n          nRows = _this$props.nRows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y--, x);\n      flipCell(y, x--);\n      this.setState({\n        board: board\n      }); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var renderBoard = [];\n\n      for (var y = 0; y < this.props.nRows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: y + '-' + x,\n            isLit: _this2.state.board[y][x],\n            flipCellsAround: function flipCellsAround() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.nCols; x++) {\n          _loop(x);\n        }\n\n        renderBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, row));\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, renderBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 50\n};\nexport default Board;","map":{"version":3,"sources":["/Users/markswinimer/react-jumpstart/square-puzzle/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","flipCellsAround","nRows","length","i","row","nCols","push","Math","floor","random","chanceLightStartsOn","coord","console","log","split","map","Number","y","x","flipCell","setState","renderBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n\n * State:\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 50\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this)\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    while(this.props.nRows > board.length) {\n      let i = 0;\n      let row = [];\n      for(i = 0; i < this.props.nCols; i++) {\n        row.push((Math.floor(Math.random() * 100)) >= this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n    // TODO: create array-of-arrays of true/false values\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\" ------- \")\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y--, x);\n    flipCell(y, x--);\n    this.setState( { board: board })\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n\n  render() {\n    let renderBoard = [];\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n      for(let x = 0; x < this.props.nCols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={ y + '-' + x } isLit={this.state.board[y][x]} flipCellsAround={() => this.flipCellsAround(coord)}/>)\n      }\n      renderBoard.push(<tr key={y}>{row}</tr>)\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    return(\n      <table className=\"Board\">\n        <tbody>\n            {renderBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}